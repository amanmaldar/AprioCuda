//
// Created by Lenovo on 3/26/2018.
//

#ifndef APRIORI_FUNCTIONS_H
#define APRIORI_FUNCTIONS_H
#include "apriori.hcu"

using namespace std;

//print all the items along with freq
void printC1(){
	for (int i=0; i<= maxItemID; i++)
	{
			if (printing == 1) 
				cout << "Database Item:: (" << i << ") Freq is: " << C1[i] << endl; 

	}
}

void printL1(){
	for (int i=0; i<= maxItemID; i++)
	{
		if(C1[i] >= minSupport){		//itemIDcount = C1
			if (printing == 1) 
				cout << "1 Frequent Item is: (" << i << ") Freq is: " << C1[i] << endl; 
		}
	}
}


void printC2(){
	for (auto i = C2.begin(); i < C2.end(); i++) {
			cout << "2 Items are: (" <<i -> a<< "," << i -> b<< ") " << endl;
	}
}


void printL2(){

for (auto i = L2.begin(); i != L2.end(); i++){
			cout << "2 Items are: (" <<i -> a<< "," << i -> b<< ") " << endl;
}
			cout << "two_freq_itemset:      " << two_freq_itemset << endl;

}


void printC3(){
	for (auto i = C3.begin(); i < C3.end(); i++) {
			cout << "3 Items are: (" <<i -> a<< "," << i -> b << "," << i->c << ") " << endl;
	}
}


void printL3(){

for (auto i = L3.begin(); i != L3.end(); i++){
			cout << "3 Items are: (" <<i -> a<< "," << i -> b<< "," << i->c << ") " << endl;
}
	cout << "three_freq_itemset:    " << three_freq_itemset << endl << "\n";


}

void printC4(){
	for (auto i = C4.begin(); i < C4.end(); i++) {
			cout << "4 Items are: (" <<i -> a<< "," << i -> b<< "," << i->c << "," << i->d << ") " << endl;
	}
}


void printL4(){

for (auto i = L4.begin(); i != L4.end(); i++){
			cout << "4 Items are: (" <<i -> a<< "," << i -> b<< "," << i->c << "," << i->d << ") " << endl;
}
	cout << "four_freq_itemset:    " << four_freq_itemset << endl << "\n";


}

//void printC4();
//void printL1();
//void printL2();
//void printL3();
//void printL4();





void parse_database(){

    fileName = "6entries.txt";    
    


    ifstream infile(fileName);
    string line;
    // parse_database();
    for (int i = 0; i <= maxItemID; ++i){
        C1.push_back(0) ;          //initialize all the itemID (1 -> 1000) counts with zero.
    }

    // used later to calculate the count of pair

    vector <int> tmpTID;
    tmpTID.push_back(0);
    for (int i = 0; i <= maxItemID; i++){
        //initialize each vector element in itemId_TidMapping with a vector tmpTID
        itemId_TidMapping.push_back(tmpTID) ;
        //itemIDcount[i] = 0;
    }

    int n;
    TID_Transactions = 1;

    while (getline(infile,line)){
        istringstream iss(line);       //iss refers to each element in line
        //cout << "Transactions are: " << line << endl;
        //TID_Transactions +=1;

        while( iss >> n ){              // work on a every single itemID on transaction.

            C1[n] +=1;	// itemIDcount = C1
		totalItems++;
            // m captures the number of items in one transaction (one line of file).

            //push TID to corresponding vector of itemID
            itemId_TidMapping.at(n).push_back(TID_Transactions);
            // these vectors would be automatically sorted and hence we can use set_intersection later.
			
        }
        TID_Transactions++;
    } // Parsing done
	 cout << "totalItems: " << totalItems << endl;
    totalItems += maxItemID + 1;    //used to adjust lenght of A
    infile.close();

}

#endif //APRIORI_FUNCTIONS_H
